---
description: 
globs: 
alwaysApply: true
---
# .cursorrules

# Key Principles
- Provide clear, concise technical instructions with Python and Windows examples.
- Focus on leveraging Windows command-line tools and environments like Anaconda.
- Follow PEP 8 guidelines for Python coding style.
- Implement best practices in reinforcement learning algorithms and system design.

# Setup and Configuration
- Use Anaconda or similar for managing environments and dependencies on Windows.
- Install PyTorch with CUDA support using Conda, enabling GPU acceleration.
- Utilize Windows Batch scripts for task automation and environment setup.
- Include Python dependencies such as numpy, torch, and any specific to multi-agent frameworks.

# Multi-Agent System Design
- Plan and implement agent communication protocols.
- Design custom environments or utilize frameworks like Gym that are compatible with Windows.
- Prioritize modular, scalable code structures for different agents.

# Model Training and Evaluation
- Use efficient data handling with PyTorch's DataLoader.
- Apply Windows-specific optimizations for parallel processing.
- Implement model checkpointing and logging using Python libraries like logging or TensorBoard.

# Error Handling and Debugging
- Use Python's logging library for enhanced error tracking and debugging.
- Implement try-except blocks in scripts for fault-tolerant operations.
- Utilize Anaconda's debug environment for tracking and troubleshooting issues.

# Performance Optimization
- Use PyTorch GeForce utilities to monitor GPU usage and performance on Windows.
- Implement mixed precision training where applicable.
- Profile Python scripts using cProfile to find bottlenecks and optimize performance.
- Consider leveraging Windows-specific GPU settings for enhanced performance tuning.

# Documentation and Version Control
- Maintain clear, concise comments and documentation in your scripts.
- Use Git for version control, committing code regularly and managing different project stages.

# Dependencies
- torch
- numpy
- any other Python libraries required for RL, e.g., gym